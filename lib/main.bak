// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// ignore_for_file: public_member_api_docs

import 'dart:async';
import 'package:flutter/material.dart';
import 'package:sensors_plus/sensors_plus.dart';

import 'snake.dart';

void main() 
{
  runApp(const MyApp());
}

class MyApp extends StatelessWidget 
{
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) 
  {
    return MaterialApp
    (
      title: 'Sensors Demo',
      theme: ThemeData
      (
        primarySwatch: Colors.blue,
      ),
      home: const MyHomePage(title: 'Flutter Demo Home Page'),
    );
  }
}

class MyHomePage extends StatefulWidget 
{
  const MyHomePage({Key? key, this.title}) : super(key: key);

  final String? title;

  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> 
{
  static const int _snakeRows = 20;
  static const int _snakeColumns = 20;
  static const double _snakeCellSize = 10.0;

  List<double>? _accelerometerValues;
  List<double>? _userAccelerometerValues;
  List<double>? _gyroscopeValues;
  List<double>? _magnetometerValues;
  double _x = 0;
  double _y = 0;
  double _z = 0;

  final _streamSubscriptions = <StreamSubscription<dynamic>>[];

  @override
  Widget build(BuildContext context) 
  {
    final accelerometer = _accelerometerValues?.map((double v) => v.toStringAsFixed(1)).toList();
    final gyroscope = _gyroscopeValues?.map((double v) => v.toStringAsFixed(1)).toList();
    final userAccelerometer = _userAccelerometerValues?.map((double v) => v.toStringAsFixed(1)).toList();
    final magnetometer = _magnetometerValues?.map((double v) => v.toStringAsFixed(1)).toList();

    return Scaffold
    (
      appBar: AppBar
      (
        title: const Text('Sensor Example'),
      ),
      body: Stack
      (
        children: <Widget>
        [
          indicator(context, _x, _y, _z, Colors.amber),
          Column
          (
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: <Widget>
            [
              Center
              (
                child: DecoratedBox
                (
                  decoration: BoxDecoration
                  (
                    border: Border.all(width: 1.0, color: Colors.black38),
                  ),
                  child: SizedBox
                  (
                    height: _snakeRows * _snakeCellSize,
                    width: _snakeColumns * _snakeCellSize,
                    child: Snake
                    (
                      rows: _snakeRows,
                      columns: _snakeColumns,
                      cellSize: _snakeCellSize,
                    ),
                  ),
                ),
              ),
              Padding
              (
                padding: const EdgeInsets.all(16.0),
                child: Row
                (
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: <Widget>
                  [
                    Text('Accelerometer: $accelerometer'),
                  ],
                ),
              ),
              Padding
              (
                padding: const EdgeInsets.all(16.0),
                child: Row
                (
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: <Widget>
                  [
                    Text('UserAccelerometer: $userAccelerometer'),
                  ],
                ),
              ),
              Padding
              (
                padding: const EdgeInsets.all(16.0),
                child: Row
                (
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: <Widget>
                  [
                    Text('Gyroscope: $gyroscope'),
                  ],
                ),
              ),
              Padding
              (
                padding: const EdgeInsets.all(16.0),
                child: Row
                (
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: <Widget>
                  [
                    Text('Magnetometer: $magnetometer'),
                  ],
                ),
              ),
            ],
          ),
          indicator(context, -_x, -_y, _z, Colors.red.withAlpha(0x40)),
        ]
      ),
    );
  }

  Widget indicator(BuildContext context, double xPos, double yPos, double zPos, Color color) 
  {
    return Builder
    (
      builder: (context) 
      {
        final media = MediaQuery.of(context);

        final radius = 50 + 5 * zPos;
        if (radius < 1) 
        {
          return const SizedBox.shrink();
        } 
        else 
        {
          return Positioned
          (
            left: media.size.width / 2 - radius + 10 * xPos,
            top: media.size.height / 2 - radius - 30 * yPos,
            child: Container
            (
              height: 2 * radius,
              width: 2 * radius,
              decoration: BoxDecoration
              (
                color: color, borderRadius: BorderRadius.circular(radius) //more than 50% of width makes circle
              ),
            )
          );
        }
      },
    );
  }

  @override
  void dispose() 
  {
    super.dispose();
    for (final subscription in _streamSubscriptions) 
    {
      subscription.cancel();
    }
  }

  @override
  void initState() 
  {
    super.initState();

    _streamSubscriptions.add
    (
      accelerometerEvents.listen
      (
        (AccelerometerEvent event) 
        {
          setState
          (
            () 
            {
              _accelerometerValues = <double>[event.x, event.y, event.z];
              _x = event.x;
              _y = event.y;
              _z = event.z;
            }
          );
        },
      ),
    );
    /*_streamSubscriptions.add
    (
      gyroscopeEvents.listen
      (
        (GyroscopeEvent event) 
        {
          setState
          (
            () 
            {
              _gyroscopeValues = <double>[event.x, event.y, event.z];
            }
          );
        },
      ),
    );
    _streamSubscriptions.add
    (
      userAccelerometerEvents.listen
      (
        (UserAccelerometerEvent event) 
        {
          setState
          (
            () 
            {
              _userAccelerometerValues = <double>[event.x, event.y, event.z];
            }
          );
        },
      ),
    );*/
    _streamSubscriptions.add
    (
      magnetometerEvents.listen
      (
        (MagnetometerEvent event) 
        {
          setState
          (
            () 
            {
              _magnetometerValues = <double>[event.x, event.y, event.z];
            }
          );
        },
      ),
    );
  }
}